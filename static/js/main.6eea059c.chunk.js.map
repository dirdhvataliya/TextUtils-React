{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","aboutText","role","placeholder","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","style","color","heading","value","rows","onChange","event","target","backgroundColor","handleUpClick","newText","toUpperCase","showAlert","handlelowClick","toLowerCase","handleClearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","split","join","length","About","myStyle","setMyStyle","btnText","setBtnText","btnClass","setBtnClass","aria-labelledby","data-bs-parent","toggleStyle","Alert","alert","Type","word","lower","charAt","slice","capitalize","msg","App","setAlert","setMode","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"wMAIe,SAASA,EAAOC,GAC3B,OACIC,IAAAC,cAAAD,IAAAE,SAAA,KACIF,IAAAC,cAAA,OAAKE,UAAS,kCAAAC,OAAoCL,EAAMM,KAAI,QAAAD,OAAOL,EAAMM,KAAI,MACjFL,IAAAC,cAAA,OAAKE,UAAU,mBACfH,IAAAC,cAAA,KAAGE,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,IAAAC,cAAA,UAAQE,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLb,IAAAC,cAAA,QAAME,UAAU,yBAEpBH,IAAAC,cAAA,OAAKE,UAAU,2BAA2BW,GAAG,0BACzCd,IAAAC,cAAA,MAAIE,UAAU,mCACdH,IAAAC,cAAA,MAAIE,UAAU,YACVH,IAAAC,cAAA,KAAGE,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAKP,EAAMiB,OAEvEhB,IAAAC,cAAA,MAAIE,UAAU,YACVH,IAAAC,cAAA,KAAGE,UAAU,WAAWG,KAAK,KAAKP,EAAMkB,aAG5CjB,IAAAC,cAAA,QAAME,UAAU,SAASe,KAAK,UAC9BlB,IAAAC,cAAA,SAAOE,UAAU,oBAAoBK,KAAK,SAASW,YAAY,SAASN,aAAW,WACnFb,IAAAC,cAAA,UAAQE,UAAS,WAAAC,OAA0B,UAAbL,EAAMM,KAAe,UAAU,WAAaG,KAAK,UAAS,WAGxFR,IAAAC,cAAA,OAAKE,UAAS,+BAAAC,OAA8C,UAAbL,EAAMM,KAAe,OAAO,QAAO,UAC9EL,IAAAC,cAAA,SAAOE,UAAU,mBAAmBiB,QAASrB,EAAMsB,WAAYb,KAAK,WAAWU,KAAK,SAASJ,GAAG,2BAChGd,IAAAC,cAAA,SAAOE,UAAU,mBAAmBmB,QAAQ,0BAAyB,wBC3BtE,SAASC,EAASxB,GAE7B,MAAMyB,EAAKC,GAAWC,mBAAS,IAgC/B,OACA1B,IAAAC,cAAAD,IAAAE,SAAA,KACIF,IAAAC,cAAA,OAAKE,UAAU,YAAYwB,MAAO,CAACC,MAAoB,UAAb7B,EAAMM,KAAe,QAAQ,UACnEL,IAAAC,cAAA,OAAKE,UAAU,QACXH,IAAAC,cAAA,UAAKF,EAAM8B,SACf7B,IAAAC,cAAA,YAAUE,UAAU,eAAeW,GAAG,WAAWgB,MAAON,EAAMO,KAAK,IAAIC,SARvDC,IACpBR,EAAQQ,EAAMC,OAAOJ,QAOgFH,MAAO,CAACQ,gBAA+B,UAAbpC,EAAMM,KAAe,QAAQ,UAAUuB,MAAoB,UAAb7B,EAAMM,KAAe,QAAQ,YAEtML,IAAAC,cAAA,UAAQE,UAAU,kBAAkBiB,QArCtBgB,KAClB,IAAIC,EAAUb,EAAKc,cACnBb,EAAQY,GACRtC,EAAMwC,UAAU,0BAA0B,aAkCsB,wBAC5DvC,IAAAC,cAAA,UAAQE,UAAU,uBAAuBiB,QAjC1BoB,KACnB,IAAIH,EAAUb,EAAKiB,cACnBhB,EAAQY,GACRtC,EAAMwC,UAAU,0BAA0B,aA8B4B,yBAClEvC,IAAAC,cAAA,UAAQE,UAAU,uBAAuBiB,QA7BxBsB,KACrBjB,EAAQ,IACR1B,EAAMwC,UAAU,oBAAoB,aA2BoC,SACpEvC,IAAAC,cAAA,UAAQE,UAAU,uBAAuBiB,QA1B9BuB,KACf,IAAIN,EAAUO,SAASC,eAAe,YACtCR,EAAQS,SACRC,UAAUC,UAAUC,UAAUZ,EAAQP,OACtC/B,EAAMwC,UAAU,4BAA4B,aAsBsB,QAC9DvC,IAAAC,cAAA,UAAQE,UAAU,uBAAuBiB,QArBxB8B,KACrB,IAAIb,EAAUb,EAAK2B,MAAM,UACzB1B,EAAQY,EAAQe,KAAK,MACrBrD,EAAMwC,UAAU,kCAAkC,aAkBsB,uBAGxEvC,IAAAC,cAAA,OAAKE,UAAU,iBAAkBwB,MAAO,CAACC,MAAoB,UAAb7B,EAAMM,KAAe,QAAQ,UACzEL,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAG,IAAEuB,EAAK2B,MAAM,KAAKE,OAAO,cAAY7B,EAAK6B,OAAO,eACpDrD,IAAAC,cAAA,SAAG,QAAM,KAAQuB,EAAK2B,MAAM,KAAKE,OAAO,oBACxCrD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIuB,EAAK6B,OAAO,EAAE7B,EAAK,oCCrDpB,SAAS8B,IAEpB,MAAOC,EAAQC,GAAc9B,mBAAS,CAClCE,MAAM,QACNO,gBAAgB,WAEbsB,EAAQC,GAAchC,mBAAS,qBAC/BiC,EAASC,GAAelC,mBAAS,qBAqBxC,OACI1B,IAAAC,cAAA,OAAKE,UAAU,iBAAiBwB,MAAO4B,GACnCvD,IAAAC,cAAA,MAAIE,UAAU,QAAO,YACrBH,IAAAC,cAAA,OAAKE,UAAU,YAAYW,GAAG,mBAAmBa,MAAO4B,GACpDvD,IAAAC,cAAA,OAAKE,UAAU,kBACXH,IAAAC,cAAA,MAAIE,UAAU,mBAAmBW,GAAG,cACpCd,IAAAC,cAAA,UAAQ0B,MAAO4B,EAASpD,UAAU,mBAAmBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,eAAeE,gBAAc,OAAOD,gBAAc,eAAc,sBAI5KX,IAAAC,cAAA,OAAKa,GAAG,cAAcX,UAAU,mCAAmC0D,kBAAgB,aAAaC,iBAAe,qBAC/G9D,IAAAC,cAAA,OAAKE,UAAU,iBAAiBwB,MAAO4B,GACnCvD,IAAAC,cAAA,cAAQ,4CAAiD,6WAA0WD,IAAAC,cAAA,YAAM,mBAAuB,kDAIxcD,IAAAC,cAAA,OAAKE,UAAU,kBACXH,IAAAC,cAAA,MAAIE,UAAU,mBAAmBW,GAAG,cACpCd,IAAAC,cAAA,UAAQ0B,MAAO4B,EAASpD,UAAU,6BAA6BK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,eAAeE,gBAAc,QAAQD,gBAAc,eAAc,sBAIvLX,IAAAC,cAAA,OAAKa,GAAG,cAAcX,UAAU,8BAA8B0D,kBAAgB,aAAaC,iBAAe,qBAC1G9D,IAAAC,cAAA,OAAKE,UAAU,iBAAiBwB,MAAO4B,GACnCvD,IAAAC,cAAA,cAAQ,6CAAkD,8WAA2WD,IAAAC,cAAA,YAAM,mBAAuB,kDAI1cD,IAAAC,cAAA,OAAKE,UAAU,kBACXH,IAAAC,cAAA,MAAIE,UAAU,mBAAmBW,GAAG,gBACpCd,IAAAC,cAAA,UAAQ0B,MAAO4B,EAASpD,UAAU,6BAA6BK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,iBAAiBE,gBAAc,QAAQD,gBAAc,iBAAgB,sBAI3LX,IAAAC,cAAA,OAAKa,GAAG,gBAAgBX,UAAU,8BAA8B0D,kBAAgB,eAAeC,iBAAe,qBAC9G9D,IAAAC,cAAA,OAAKE,UAAU,iBAAiBwB,MAAO4B,GACnCvD,IAAAC,cAAA,cAAQ,4CAAiD,8WAA2WD,IAAAC,cAAA,YAAM,mBAAuB,mDAKzcD,IAAAC,cAAA,OAAKE,UAAU,aACXH,IAAAC,cAAA,UAAQO,KAAK,SAASY,QA7DlB2C,KACe,UAA5BR,EAAQpB,iBACPqB,EAAW,CACP5B,MAAM,QACNO,gBAAgB,UAEpBuB,EAAW,qBACXE,EAAY,0BAGZJ,EAAW,CACP5B,MAAM,QACNO,gBAAgB,UAEpBuB,EAAW,oBACXE,EAAY,uBA8CwCzD,UAAWwD,GAAYF,KCxDxEO,MAdf,SAAejE,GAKX,OAEIA,EAAMkE,OAASjE,IAAAC,cAAA,OAAKE,UAAS,eAAAC,OAAiBL,EAAMkE,MAAMC,KAAI,gCAAgChD,KAAK,SAC/FlB,IAAAC,cAAA,cAAQ,IAPIkE,KAChB,MAAMC,EAAQD,EAAK1B,cACnB,OAAO2B,EAAMC,OAAO,GAAG/B,cAAgB8B,EAAME,MAAM,IAKrCC,CAAWxE,EAAMkE,MAAMC,MAAM,KAAU,IAAEnE,EAAMkE,MAAMO,MCoD5DC,MAjDf,WAEE,MAAOR,EAAMS,GAAYhD,mBAAS,OAC3BrB,EAAKsE,GAAWjD,mBAAS,SAgB1Ba,EAAYA,CAACqC,EAAQpE,KACzBkE,EAAS,CACPF,IAAII,EACJV,KAAK1D,IAEPqE,WAAW,KACTH,EAAS,OACT,OAGJ,OACE1E,IAAAC,cAAAD,IAAAE,SAAA,KAEEF,IAAAC,cAACH,EAAM,CAACS,MAAM,YAAYF,KAAMA,EAAOgB,WA5BxBA,KACL,UAAThB,GACDsE,EAAQ,QACR/B,SAASkC,KAAKnD,MAAMQ,gBAAkB,QACtCI,EAAU,+BAA+B,WACzCK,SAASrC,MAAQ,2BAGjBoE,EAAQ,SACR/B,SAASkC,KAAKnD,MAAMQ,gBAAkB,QACtCI,EAAU,gCAAgC,WAC1CK,SAASrC,MAAQ,4BAiB8CU,UAAU,QAAQD,KAAK,SACtFhB,IAAAC,cAAC+D,EAAK,CAACC,MAAOA,IAKRjE,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAACsB,EAAQ,CAACgB,UAAWA,EAAWV,QAAQ,kCAAiCxB,KAAMA,KAKzFL,IAAAC,cAACqD,EAAK,QC7CKyB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAW9C,SAASC,eAAe,SACpD8C,OACH3F,IAAAC,cAACD,IAAM4F,WAAU,KACf5F,IAAAC,cAACwE,EAAG,QAORM,K","file":"static/js/main.6eea059c.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nexport default function Navbar(props){\r\n    return(\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.home}</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n            </li>\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className={`btn btn-${props.mode==='light'?'success':'primary'}`} type=\"submit\">Search</button>\r\n            </form>\r\n            \r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-3`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </nav>\r\n      </>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {title:propTypes.string,\r\n                    aboutText:propTypes.string};\r\n","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props){\r\n\r\n    const[text,setText] = useState('');\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To UpperCase!\",\"success\");\r\n    }\r\n    const handlelowClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To LowerCase!\",\"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"TextArea Cleared!\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        let newText = document.getElementById('TextForm');\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Text Copied To ClipBoard!\",\"success\");\r\n    } \r\n    const handleExtraSpace = ()=>{\r\n        let newText = text.split(/ [ ]+ /);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra Spaces From Text!\",\"success\");\r\n    }\r\n    \r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    return(\r\n    <>\r\n        <div className='container' style={{color: props.mode==='light'?'black':'white'}} >\r\n            <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n            <textarea className=\"form-control\" id=\"TextForm\" value={text} rows=\"8\" onChange={handleOnChange} style={{backgroundColor : props.mode==='light'?'white':'#212529',color: props.mode==='light'?'black':'white'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handlelowClick}>Convert To Lowerrcase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\"  style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h2>Your Text Summery</h2>\r\n            <p> {text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>Took {0.008 * text.split(\" \").length} Minutes To Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"You Can Preview Your Text Here\"}</p>\r\n        </div>    \r\n    </>\r\n    )\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function About(){\r\n\r\n    const [myStyle,setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    });\r\n    const [btnText,setBtnText] = useState('Enable Dark Mode');\r\n    const [btnClass,setBtnClass] = useState('btn btn-dark my-3')\r\n\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.backgroundColor === 'white'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n            setBtnClass('btn btn-primary my-3')\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n            setBtnClass('btn btn-dark my-3')\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className='container my-3' style={myStyle}>\r\n            <h2 className='my-2'>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">  \r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button style={myStyle} className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <button type='button' onClick={toggleStyle} className={btnClass} >{btnText}</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nfunction Alert(props){\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);   \r\n    }\r\n    return(\r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.Type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong> {capitalize(props.alert.Type)} </strong>:{props.alert.msg}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport React,{ useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from 'react-router-dom';\n\n\nfunction App() {\n  // States\n  const [alert,setAlert] = useState(null); //States For Alert \n  const [mode,setMode] = useState('light'); //States For Mode\n  const toggleMode = ()=>{  //Function For Mode \n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark Mode Hase Been Enabled!\",\"success\");\n      document.title = 'TextUtiles - Dark Mode';\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Hase Been Enabled!\",\"success\");\n      document.title = 'TextUtiles - Light Mode';\n    }\n  }\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      Type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n  }\n  //Return \n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode}  toggleMode={toggleMode} aboutText=\"About\" home=\"Home\"/>\n      <Alert alert={alert}/>\n      {/* <Switch>\n          <Route exact path=\"/about\"> */}\n          {/* </Route>\n          <Route exact path=\"/\"> */}\n            <div className=\"container my-3\">\n              <TextForm showAlert={showAlert} heading=\"Enter The Text To Analyze below\"mode={mode}/> \n            </div>\n          {/* </Route>\n      </Switch>\n    </Router> */}\n    <About/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}